{"version":3,"sources":["Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/AddMessageForm.tsx","Components/Dialogs/Dialogs.tsx","hoc/WithAuthRedirect.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","className","s","dialog","src","alt","to","id","activeClassName","active","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","messages","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","DialogsContainer","compose","connect","dialogsPage","actions","WrappedComponent","restProps"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCiBnMC,EATgB,SAACC,GAC7B,OACI,yBAAKC,UAAWC,IAAEC,QACd,yBAAKC,IAAI,iJAAqJC,IAAI,WAClK,kBAAC,IAAD,CAASC,GAAI,YAAcN,EAAMO,GAAIC,gBAAiBN,IAAEO,QAAST,EAAMU,QCApEC,EANc,SAACX,GAC1B,OACI,yBAAKC,UAAWC,IAAEU,SAAUZ,EAAMY,U,iCCHpCC,EAAcC,YAAiB,IAqBtBC,cAAoC,CAACC,KAAM,wBAA3CD,EAfT,SAACf,GACH,OACI,0BAAMiB,SAAUjB,EAAMkB,cAClB,kBAACC,EAAA,EAAD,CAAOC,YAAc,qBACdV,KAAK,iBACLW,UAAaC,IACbC,SAAY,CAACC,IAAUX,KAE9B,6BACI,qDC0BDY,EA9BmB,SAACzB,GAE/B,IAAI0B,EACA1B,EAAM2B,YAAYC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAMoB,IAAKD,EAAEtB,GAAIA,GAAIsB,EAAEtB,QAEtEwB,EACA/B,EAAMgC,aAAaJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASrB,QAASqB,EAAErB,QAASkB,IAAKG,EAAE1B,QAQpE,OACI,yBAAKN,UAAWC,IAAEgC,SACd,yBAAKjC,UAAWC,IAAEiC,cACZT,GAEN,yBAAKzB,UAAWC,IAAEkC,UACZL,EACF,6BACM,kBAAC,EAAD,CAAgBd,SAZZ,SAACoB,GACnBrC,EAAMsC,YAAYD,EAAOE,uB,wBCvB7BC,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,WCUrBE,EAAmBC,YACrBC,aATkB,SAACL,GACnB,MAAO,CACHd,YAAac,EAAMM,YAAYpB,YAC/BK,aAAcS,EAAMM,YAAYf,gBAMX,CAACM,YAAaU,IAAQV,eDH5C,SAAgCW,GAanC,OAFqCH,YAA6CN,EAA7CM,EATa,SAAC9C,GAAW,IACrD0C,EAAwB1C,EAAxB0C,OAAWQ,EADyC,YAC5BlD,EAD4B,YAEzD,OAAK0C,EAGD,kBAACO,EAAqBC,GAHN,kBAAC,IAAD,CAAU5C,GAAG,gBCFhBuC,CAGvBpB,GAQamB","file":"static/js/4.d03b5cfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__12Lp6\",\"active\":\"Dialogs_active__1aVXh\",\"dialogsItems\":\"Dialogs_dialogsItems__2D7zr\",\"dialog\":\"Dialogs_dialog__1XzUo\",\"messages\":\"Dialogs_messages__WLERb\",\"message\":\"Dialogs_message__wBIto\"};","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nlet DialogItem: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src=\"https://vignette.wikia.nocookie.net/avatar/images/f/f4/3%D1%8521_%D0%90%D0%B0%D0%BD%D0%B3.jpg/revision/latest?cb=20110327121409&amp;path-prefix=ru\" alt=\"avatar\"/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  DialogItem;\r\n","import React, {FC} from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nlet Message: FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport { NewMessageFormValuesType } from \"./Dialogs\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder = 'Enter your message'\r\n                   name='newMessageBody'\r\n                   component = {Textarea}\r\n                   validate = {[required, maxLength50]}\r\n            />\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from './AddMessageForm';\r\nimport {DialogType, MessageType} from \"../../redux/dialogs-reducer\";\r\n\r\ntype PropsType = {\r\n    dialogsData: Array<DialogType>\r\n    messagesData: Array<MessageType>\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nlet Dialogs:React.FC<PropsType> = (props) => {\r\n\r\n    let dialogsElements =\r\n        props.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messagesElements =\r\n        props.messagesData.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    // if(!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    const addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                { messagesElements}\r\n                <div>\r\n                      <AddMessageForm onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nexport function withAuthRedirect<WCP> (WrappedComponent: ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to='/login' />\r\n\r\n        return (\r\n            <WrappedComponent {...restProps as WCP} />\r\n        )\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, {}, WCP, AppStateType>(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React, {ComponentType} from 'react';\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n//Возвращает объект с данными из state и засовываем их в пропсы\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n    }\r\n}\r\n//Возвращает\r\n\r\nconst DialogsContainer = compose<ComponentType>(\r\n    connect(mapStateToProps, {sendMessage: actions.sendMessage}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//Создаём контейнерную компоненту, внутри рендерит перезнтационную и внутрь её в качестве пропсов передает св-ва из этих двух объектов\r\n//коннект сам вызывет функции mapStateToProps и mapDispatchToProps и передаст внутрь первой state, а второй dispatch с биндом на store\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}