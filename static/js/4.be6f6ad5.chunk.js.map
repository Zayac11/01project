{"version":3,"sources":["hoc/WithAuthRedirect.js","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogItem/DialogItem.jsx","Components/Dialogs/Message/Message.jsx","Components/Dialogs/AddMessageForm.jsx","Components/Dialogs/Dialogs.jsx","Components/Dialogs/DialogsContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogItem","className","s","dialog","src","alt","id","activeClassName","active","name","Message","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","validate","required","Dialogs","dialogsElements","dialogsData","map","d","key","messagesElements","messagesData","m","dialogs","dialogsItems","messages","values","addMessage","newMessageBody","DialogsContainer","compose","dialogsPage","newMessageText","dispatch","addMessageActionCreator"],"mappings":"6MAIIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OAEZ,kBAACG,EAAcE,KAAKC,OAFO,kBAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAWtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,oBCpB7EM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,+FCYnMC,EATC,SAACN,GACd,OACI,yBAAKO,UAAWC,IAAEC,QACd,yBAAKC,IAAI,iJAAqJC,IAAI,WAClK,kBAAC,IAAD,CAASV,GAAI,YAAcD,EAAMY,GAAIC,gBAAiBL,IAAEM,QAASd,EAAMe,QCCpEC,EAND,SAAChB,GACX,OACI,yBAAKO,UAAWC,IAAES,SAAUjB,EAAMiB,U,iCCCpCC,EAAcC,YAAiB,IAiBxBC,EAAsBC,YAAW,CAACC,KAAM,wBAAlBD,EAfZ,SAACrB,GACpB,OACI,0BAAMuB,SAAUvB,EAAMwB,cAClB,kBAACC,EAAA,EAAD,CAAOC,YAAc,qBACdX,KAAK,iBACLY,UAAaC,IACbC,SAAY,CAACC,IAAUZ,KAE9B,6BACI,qDC4BDa,EArCD,SAAC/B,GAEX,IAAIgC,EACAhC,EAAMiC,YAAYC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYpB,KAAMoB,EAAEpB,KAAMqB,IAAKD,EAAEvB,GAAIA,GAAIuB,EAAEvB,QAEtEyB,EACArC,EAAMsC,aAAaJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAStB,QAASsB,EAAEtB,QAASmB,IAAKG,EAAE3B,QAQpE,OACI,yBAAKL,UAAWC,IAAEgC,SACd,yBAAKjC,UAAWC,IAAEiC,cACZT,GAIN,yBAAKzB,UAAWC,IAAEkC,UACZL,EACF,6BAIM,kBAACjB,EAAD,CAAqBG,SAjBjB,SAACoB,GACnB3C,EAAM4C,WAAWD,EAAOE,uB,wBCK1BC,EAAmBC,YACrB5C,aAjBkB,SAACV,GACnB,MAAO,CACHwC,YAAaxC,EAAMuD,YAAYf,YAC/BK,aAAc7C,EAAMuD,YAAYV,aAChCW,eAAgBxD,EAAMuD,YAAYC,mBAIjB,SAACC,GACtB,MAAO,CACHN,WAAY,SAACC,GACTK,EAASC,YAAwBN,SAOzCjD,IAFqBmD,CAGvBhB,GAQae","file":"static/js/4.be6f6ad5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return (\r\n                <Component {...this.props} />\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__15XnY\",\"active\":\"Dialogs_active__Ap9xp\",\"dialogsItems\":\"Dialogs_dialogsItems__SssmW\",\"dialog\":\"Dialogs_dialog__34NCm\",\"messages\":\"Dialogs_messages__1pP-7\",\"message\":\"Dialogs_message__UtrQr\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nlet DialogItem = (props) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <img src=\"https://vignette.wikia.nocookie.net/avatar/images/f/f4/3%D1%8521_%D0%90%D0%B0%D0%BD%D0%B3.jpg/revision/latest?cb=20110327121409&amp;path-prefix=ru\" alt=\"avatar\"/>\r\n            <NavLink to={'/dialogs/' + props.id} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default  DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nlet Message = (props) => {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\n\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder = 'Enter your message'\r\n                   name='newMessageBody'\r\n                   component = {Textarea}\r\n                   validate = {[required, maxLength50]}\r\n            />\r\n            <div>\r\n                <button>Send message</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport const AddMessageFormRedux = reduxForm ({form: 'dialogAddMessageForm'})(AddMessageForm)","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {AddMessageFormRedux} from \"./AddMessageForm\";\r\n\r\n\r\n\r\nlet Dialogs = (props) => {\r\n\r\n    let dialogsElements =\r\n        props.dialogsData.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n\r\n    let messagesElements =\r\n        props.messagesData.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    // if(!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    const addNewMessage = (values) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements}\r\n                {/*<DialogItem name={dialogsData[0].name} id={dialogsData[0].id} />*/}\r\n                {/*<DialogItem name='Valera' id='2' />*/}\r\n            </div>\r\n            <div className={s.messages}>\r\n                { messagesElements}\r\n                <div>\r\n\r\n                {/*<textarea onChange={ onMessageChange} ref={ newMessageElement}*/}\r\n                {/*          value={ props.newMessageText} />*/}\r\n                      <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n\r\n                {/*<Message message={messagesData[0].message} />*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport {addMessageActionCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n//Возвращает объект с данными из state и засовываем их в пропсы\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n}\r\n//Возвращает\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addMessage: (newMessageBody) => {\r\n            dispatch(addMessageActionCreator(newMessageBody));\r\n        },\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\r\n//\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n//Создаём контейнерную компоненту, внутри рендерит перезнтационную и внутрь её в качестве пропсов передает св-ва из этих двух объектов\r\n//коннект сам вызывет функции mapStateToProps и mapDispatchToProps и передаст внутрь первой state, а второй dispatch с биндом на store\r\n\r\nexport default DialogsContainer;\r\n"],"sourceRoot":""}