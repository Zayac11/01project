{"version":3,"sources":["hoc/WithAuthRedirect.js","Components/Profile/ProfileInfo/ProfileInfo.module.css","assets/images/findjob.jpg","assets/images/nofindjob.jpg","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","Components/Profile/ProfileInfo/ProfileInfo.jsx","Components/Profile/MyPosts/Post/Post.jsx","Components/Profile/MyPosts/MyPosts.jsx","Components/Profile/MyPosts/MyPostsContainer.jsx","Components/Profile/Profile.jsx","Components/Profile/ProfileContainer.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","alt","aboutMe","findJob","noFindJob","onClick","noFindJobAC","findJobAC","Preloader","Post","item","text","likeCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","name","component","Textarea","validate","required","MyPosts","memo","postsElement","postsData","map","p","key","id","postsBlock","values","onAddPost","newPostText","posts","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","history","push","getUserProfile","getStatus","compose","withRouter"],"mappings":"6MAIIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIdE,EAAmB,SAACC,GAAe,IAEtCC,EAFqC,uKAInC,OAAKC,KAAKC,MAAMN,OAEZ,kBAACG,EAAcE,KAAKC,OAFO,kBAAC,IAAD,CAAUC,GAAG,eAJT,GAEXC,IAAML,WAWtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,0CCpB7EM,EAAOC,QAAU,CAAC,iBAAmB,sCAAsC,QAAU,+B,oBCDrFD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCC3CD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,MAAQ,yB,oBCAnED,EAAOC,QAAU,CAAC,KAAO,qB,oLCoCVC,EAnCgB,SAACN,GAAW,IAAD,EAERO,oBAAS,GAFD,mBAEjCC,EAFiC,KAEvBC,EAFuB,OAGZF,mBAASP,EAAMU,QAHH,mBAGjCA,EAHiC,KAGzBC,EAHyB,KAKtCC,qBAAW,WACPD,EAAUX,EAAMU,UAClB,CAACV,EAAMU,SAYT,OACI,8BACMF,GACE,6BACI,0BAAMK,cAdC,WACnBJ,GAAY,KAa0CT,EAAMU,QAAU,SAGjEF,GACG,6BACI,2BAAOM,SAZF,SAACC,GACfJ,EAAUI,EAAEC,cAAcC,QAWgBC,OAhBxB,WACrBT,GAAY,GACZT,EAAMmB,aAAaT,IAc0DU,WAAW,EAAMH,MAAOP,OCO9FW,EA9BK,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,QAASZ,EAAoC,EAApCA,OAAQS,EAA4B,EAA5BA,aAAiBnB,EAAW,mDAC/D,OAAIsB,EAIA,6BACI,yBAAKC,UAAWC,IAAEC,kBACd,6BACI,yBAAKC,IAAKJ,EAAQK,OAAOC,MAAOC,IAAI,KACpC,kBAAC,EAAD,CAAwBnB,OAAQA,EAAQS,aAAcA,KAG1D,6BACKG,EAAQQ,SAGb,yBAAKP,UAAWC,IAAEO,SACd,yBAAKL,IAAK1B,EAAM+B,QAAUA,IAAUC,MACnChC,EAAM+B,QAAU,4BAAQE,QAAS,WAC9BjC,EAAMkC,gBADO,wEAEW,4BAAQD,QAAS,WACzCjC,EAAMmC,cADkB,0EAlBjC,kBAACC,EAAA,EAAD,O,4CCYAC,E,uKAdP,OACI,yBAAKd,UAAWC,IAAEc,MACd,yBAAKZ,IAAI,iJAAiJG,IAAI,KAC7J9B,KAAKC,MAAMuC,KACZ,6BACA,8BACKxC,KAAKC,MAAMwC,UADhB,e,GATGtC,IAAML,W,iCCInB4C,EAAcC,YAAiB,IAiB/BC,EAAsBC,YAAW,CAACC,KAAM,yBAAlBD,EAfL,SAAC5C,GACpB,OACI,0BAAM8C,SAAU9C,EAAM+C,cAClB,kBAACC,EAAA,EAAD,CAAOC,YAAc,OACdC,KAAO,cACPC,UAAaC,IACbC,SAAY,CAACC,IAAUb,KAE9B,6BACI,iDAmCDc,EA3BCrD,IAAMsD,MAAK,SAAAxD,GAEvB,IAAIyD,EACAzD,EAAM0D,UAAUC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAMrB,KAAMqB,EAAErB,KAAMC,UAAWoB,EAAEpB,UAAWqB,IAAKD,EAAEE,QAKhF,OACI,yBAAKvC,UAAWC,IAAEuC,YACd,wCACA,6BACI,6BACI,kBAACpB,EAAD,CAAqBG,SARpB,SAACkB,GACdhE,EAAMiE,UAAUD,EAAOE,kBAYnB,yBAAK3C,UAAWC,IAAE2C,OACbV,O,QCtBFW,EAFUjE,aAhBH,SAACV,GACnB,MAAO,CACHiE,UAAWjE,EAAM4E,YAAYX,UAC7BQ,YAAazE,EAAM4E,YAAYH,gBAId,SAACI,GACtB,MAAO,CACHL,UAAW,SAACC,GACRI,EAASC,YAAqBL,QAMjB/D,CAA6CoD,GCAvDiB,EAhBC,SAACxE,GACb,OAEI,6BACI,kBAAC,EAAD,CAAasB,QAAStB,EAAMsB,QACfZ,OAAQV,EAAMU,OACdS,aAAcnB,EAAMmB,aACpBY,QAAS/B,EAAM+B,QACfI,UAAWnC,EAAMmC,UACjBD,YAAalC,EAAMkC,cAEhC,kBAAC,EAAD,Q,uBCRNuC,E,kLAGE,IAAIC,EAAS3E,KAAKC,MAAM2E,MAAMC,OAAOF,OAChCA,IACDA,EAAS3E,KAAKC,MAAM8D,KAEhB/D,KAAKC,MAAM6E,QAAQC,KAAK,UAGhC/E,KAAKC,MAAM+E,eAAeL,GAC1B3E,KAAKC,MAAMgF,UAAUN,K,+BAIrB,OACI,6BACI,kBAAC,EAAD,iBAAa3E,KAAKC,MAAlB,CAAyBmB,aAAcpB,KAAKC,MAAMmB,qB,GAjBnCjB,IAAML,WAkCtBoF,sBACX9E,aAXkB,SAACV,GACnB,MAAO,CACH6B,QAAS7B,EAAM4E,YAAY/C,QAC3BS,QAAStC,EAAM4E,YAAYtC,QAC3B+B,GAAIrE,EAAME,KAAKmE,GACfpE,OAAQD,EAAME,KAAKD,OACnBgB,OAAQjB,EAAM4E,YAAY3D,UAKL,CAACyB,cAAWD,gBAAa6C,mBAAgBC,cAAW7D,mBAC7E+D,IAFWD,CAIbR","file":"static/js/3.a20aec31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    };\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n            return (\r\n                <Component {...this.props} />\r\n            )\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3g_V7\",\"findJob\":\"ProfileInfo_findJob__yKHvp\"};","module.exports = __webpack_public_path__ + \"static/media/findjob.4b02ad64.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nofindjob.098f50d3.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__lDKsX\",\"posts\":\"MyPosts_posts__1o3U_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__RbhOS\"};","import React, {useEffect, useState} from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); //возвращает массив\r\n    let [status, setStatus] = useState(props.status); //возвращает массив\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    },[props.status] ); //когда props.status придет новый, хук засетает новый статус\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    let onStatusChange = (e) => {\r\n           setStatus(e.currentTarget.value);\r\n        }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }>{props.status || \"----\" }</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur = { deactivateEditMode } autoFocus={true} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport findJob from '../../../assets/images/findjob.jpg'\r\nimport noFindJob from '../../../assets/images/nofindjob.jpg'\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus, ...props}) => {\r\n    if(!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img src={profile.photos.large} alt=\"\"/>\r\n                    <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n                </div>\r\n\r\n                <div>\r\n                    {profile.aboutMe}\r\n                </div>\r\n\r\n                <div className={s.findJob}>\r\n                    <img src={props.findJob ? findJob : noFindJob}/>\r\n                    {props.findJob ? <button onClick={() => {\r\n                        props.noFindJobAC()\r\n                    }}>Больше не ищу</button> : <button onClick={() => {\r\n                        props.findJobAC()\r\n                    }}>Найти работу</button>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nclass Post extends React.Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className={s.item}>\r\n                <img src=\"https://vignette.wikia.nocookie.net/avatar/images/f/f4/3%D1%8521_%D0%90%D0%B0%D0%BD%D0%B3.jpg/revision/latest?cb=20110327121409&path-prefix=ru\" alt=\"\"/>\r\n                {this.props.text}\r\n                <div>\r\n                <span>\r\n                    {this.props.likeCount} like\r\n                </span>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field placeholder = 'Post'\r\n                   name = 'newPostText'\r\n                   component = {Textarea}\r\n                   validate = {[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nconst AddNewPostFormRedux = reduxForm ({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n\r\nconst MyPosts = React.memo(props => {\r\n\r\n    let postsElement =\r\n        props.postsData.map(p => <Post text={p.text} likeCount={p.likeCount} key={p.id}/>)\r\n\r\n    const onSubmit = (values) => {\r\n        props.onAddPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <AddNewPostFormRedux onSubmit={onSubmit}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n                {/*<Post text={postsData[0].text} likeCount={postsData[0].likeCount}/>*/}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onAddPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        },\r\n\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n// const MyPostsContainer = (props) => {\r\n//\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//                 (store) => {\r\n//\r\n//                     let state = store.getState();\r\n//\r\n//                     let onAddPost = () => {\r\n//                         store.dispatch(addPostActionCreator());\r\n//                         //Через пропсы передаем диспатч, который отлавливает actions и при начатии на кнопу addPost будет return type: \"ADD-POST\"\r\n//                     }\r\n//\r\n//                     let onPostChange = (text) => {\r\n//                         let action = updateNewPostTextActionCreator(text);\r\n//                         store.dispatch(action);\r\n//                     }\r\n//\r\n//                     return <MyPosts onAddPost = { onAddPost }\r\n//                                     updateNewPostText = { onPostChange }\r\n//                                     postsData = {state.profilePage.postsData}\r\n//                                     newPostText = {state.profilePage.newPostText}/> } }\r\n//         </StoreContext.Consumer>\r\n//     );\r\n// }","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         findJob={props.findJob}\r\n                         findJobAC={props.findJobAC}\r\n                         noFindJobAC={props.noFindJobAC}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {findJobAC, getStatus, getUserProfile, noFindJobAC, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.id;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} updateStatus={this.props.updateStatus}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        findJob: state.profilePage.findJob,\r\n        id: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n    };\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {findJobAC, noFindJobAC, getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n//withRouter закидывает в компоненту данные url, connect закидывает в компоненду state и dispatch\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect(mapStateToProps, {findJobAC, noFindJobAC, getUserProfile})(WithUrlDataContainerComponent);"],"sourceRoot":""}