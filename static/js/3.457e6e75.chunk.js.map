{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","descriptionBlock","src","photos","large","userPhoto","mainPhoto","alt","files","length","initialValues","formData","then","maxLength10","maxLengthCreator","required","Post","item","text","likeCount","MyPostMemorized","React","memo","postsElement","postsData","p","id","postsBlock","values","onAddPost","newPostText","posts","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","MyPosts","Profile","findJob","findJobAC","noFindJobAC","ProfileContainer","userId","this","match","params","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.457e6e75.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__cSGbA\",\"findJob\":\"ProfileInfo_findJob__27W7-\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3z8F8\",\"contact\":\"ProfileInfo_contact__1lFxc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1_mSL\",\"posts\":\"MyPosts_posts__1YoGM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1Sq5c\"};","import React, {ChangeEvent, FC, useEffect, useState} from 'react';\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); //возвращает массив\r\n    let [status, setStatus] = useState(props.status); //возвращает массив\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    },[props.status] ); //когда props.status придет новый, хук засетает новый статус\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n    let onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n           setStatus(e.currentTarget.value);\r\n        }\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={ activateEditMode }>{props.status || \"----\" }</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur = { deactivateEditMode } autoFocus={true} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks\r\n","import React, {FC} from 'react';\r\nimport {createField, GetStringCase, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport s from './ProfileInfo.module.css'\r\nimport style from './../../Common/FormsControls/FormsControls.module.css'\r\nimport {ProfileType} from \"../../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringCase<ProfileType>\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, profile, error}) => { //Ошибка попадает в редакс форму под словом error\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>Save</button></div>\r\n            {\r\n                error &&\r\n                <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name</b>: {createField<ProfileTypeKeys>(\"Full Name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {createField<ProfileTypeKeys>(\"My professionals skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {createField<ProfileTypeKeys>(\"About Me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => { //keys - из объекта в массив\r\n                return <div key={key} className={s.contact}>\r\n                    {/*todo: create some solution*/}\r\n                    <b>{key}:</b> {createField(key, `contacts.` + key, [], Input)}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n","import React, {ChangeEvent, FC, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport Preloader from \"../../Common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\nimport userPhoto from '../../../assets/images/Aang.jpg';\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status:string) => void\r\n    findJob: boolean\r\n    findJobAC: () => void\r\n    noFindJobAC: () => void\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n    saveProfile: (profile:ProfileType) => Promise<any>\r\n}\r\n\r\nconst ProfileInfo: FC<PropsType> = ({profile, status, updateStatus, savePhoto, saveProfile, ...props}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false); //возвращает массив\r\n\r\n    if(!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.currentTarget.files?.length) {\r\n            savePhoto(e.currentTarget.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.descriptionBlock}>\r\n            <div>\r\n                <img src={profile.photos.large || userPhoto} className={s.mainPhoto} alt=\"\"/>\r\n                {props.isOwner && <input type=\"file\" onChange={onMainPhotoSelected}/>\r\n}\r\n\r\n                { editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                    : <ProfileData profile={profile} isOwner={props.isOwner} goToEditMode={() => {setEditMode(true)}}/> }\r\n\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData: FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>Edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"Yes\" : \"No\"}\r\n            </div>\r\n            { profile.lookingForAJob &&\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div> }\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map((key) => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\n\r\nconst Contact: FC<ContactPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <div className={s.contact}>\r\n            <b>\r\n                {contactTitle}\r\n            </b>: {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import {maxLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React, {FC} from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringCase, Textarea} from \"../../../Common/FormsControls/FormsControls\";\r\n\r\nexport const maxLength10 = maxLengthCreator(10);\r\n\r\ntype PropsType = {}\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringCase<AddPostFormValuesType>\r\n\r\nconst AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<AddPostFormValuesTypeKeys>(\"Post\", \"newPostText\",[required, maxLength10], Textarea)}\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType> ({form: 'ProfileAddNewPostForm'})(AddNewPostForm)\r\n","import React, {FC} from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    text: string\r\n    likeCount: number\r\n}\r\n\r\nconst Post: FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src=\"https://vignette.wikia.nocookie.net/avatar/images/f/f4/3%D1%8521_%D0%90%D0%B0%D0%BD%D0%B3.jpg/revision/latest?cb=20110327121409&path-prefix=ru\" alt=\"\"/>\r\n            {props.text}\r\n            <div>\r\n            <span>\r\n                {props.likeCount} like\r\n            </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;\r\n","import React, {FC} from 'react';\r\nimport AddNewPostForm, {AddPostFormValuesType} from './AddNewPostForm/AddNewPostForm';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\nexport type MapPropsType = {\r\n    postsData: Array<PostType>\r\n\r\n}\r\nexport type DispatchPropsType = {\r\n    onAddPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: FC<MapPropsType & DispatchPropsType> = (props => {\r\n\r\n    let postsElement =\r\n        props.postsData.map(p => <Post text={p.text} likeCount={p.likeCount} key={p.id}/>)\r\n\r\n    const onSubmit = (values: AddPostFormValuesType) => {\r\n        props.onAddPost(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <AddNewPostForm onSubmit={onSubmit}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElement}\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n});\r\n\r\nconst MyPostMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostMemorized;\r\n","import React from 'react';\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>\r\n(mapStateToProps, {onAddPost: actions.addPostActionCreator})(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n","import React, {FC} from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status:string) => void\r\n    findJob: boolean\r\n    findJobAC: () => void\r\n    noFindJobAC: () => void\r\n    isOwner: boolean\r\n    savePhoto: (file:any) => void\r\n    saveProfile: (profile:ProfileType) => Promise<any>\r\n}\r\n\r\nconst Profile: FC<PropsType> = (props) => {\r\n    return (\r\n\r\n        <div>\r\n            <ProfileInfo profile={props.profile}\r\n                         status={props.status}\r\n                         updateStatus={props.updateStatus}\r\n                         findJob={props.findJob}\r\n                         findJobAC={props.findJobAC}\r\n                         noFindJobAC={props.noFindJobAC}\r\n                         isOwner={props.isOwner}\r\n                         savePhoto={props.savePhoto}\r\n                         saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatus,\r\n    getUserProfile,\r\n    savePhoto,\r\n    saveProfile,\r\n    updateStatus,\r\n    actions\r\n} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    getStatus: (userId: number) => void\r\n    getUserProfile: (userId: number) => void\r\n    savePhoto: (file: File) => void\r\n    updateStatus: (text: string) => void\r\n    saveProfile: (profile: ProfileType) => Promise<any>\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapPropsType & DispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\n//todo: hoc props\r\n//Injection of HOC props\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.id;\r\n            if(!userId) {\r\n                this.props.history.push(\"/login\"); //Редирект\r\n            }\r\n        }\r\n\r\n        if(!userId) {\r\n            console.error ('Id should exists in URI params or in state')\r\n        }\r\n        else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType,) {\r\n        if(this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props}\r\n                         isOwner={!this.props.match.params.userId}\r\n                         profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatus={this.props.updateStatus}\r\n                         savePhoto={this.props.savePhoto}\r\n                         findJobAC={actions.findJobAC}\r\n                         noFindJobAC={actions.noFindJobAC}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        findJob: state.profilePage.findJob,\r\n        id: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n        status: state.profilePage.status,\r\n    };\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}